{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Denver Documentation To Navigate the document use the menu above For Installation guide click here For Brief about modules click here This Documentation is not complete and may be incomplete at some areas. Also you can check Modules bcli bdtp bdtpfserv bitmap crypt ctext datau datp get graphics3d handypy log pysetup rawd sound text Tools bdtpserver","title":"Home"},{"location":"#denver-documentation","text":"To Navigate the document use the menu above For Installation guide click here For Brief about modules click here This Documentation is not complete and may be incomplete at some areas. Also you can check","title":"Denver Documentation"},{"location":"#modules","text":"bcli bdtp bdtpfserv bitmap crypt ctext datau datp get graphics3d handypy log pysetup rawd sound text","title":"Modules"},{"location":"#tools","text":"bdtpserver","title":"Tools"},{"location":"brief/","text":"Brief This page contains information about every module in the project. Modules bcli This module is usually useful for beautiful command line interface for users. the user can easily understand with the help of cross-platform coloring solutions which is a good sign and what is the bad sign, Nothing. bcli's default format contains the following functions. good (green color) bad (red color) info (yellow color) run (bright white color) input (emulates default input function with blue colored input prompt) all the above function emulates complete print function except for input which emulates input function. bdtp This module is all about sockets, many times it happens that you are unable to send up large data with sockets and you are not willing to write tons of lines for the same. So here we are, we implement the easiest methods for implementing sockets for big data transfer. we provide Host side sending Client side sending Host side receiving Client side receiving Also there are situations where you have a socket already hosted but want to implement our API. No Problems, we provide the following features. Use BDTP with existing socket Get the average speed of the socket Compress data to save data over internet, also resulting in fast transfer on slow connections bdtpfserv We have solved the problem of data transfer using BDTP but now the problem is with hosting files on the server. Well, that requires a lot of lines for hosting and getting the things but why to worry we provide the module for that. It basically provide the following features for you to work with Hosting solution for hosting your files which are within a directory. Also, you can simply specify the sub directory of the files hosting service to limit user posts to that directory. Function like listdir, mkdir, post, get to retrieve files and data Our hosting service is also supports multi-threaded get functionality. bitmap BitMap module is a little weird because you can not save images or load images, but instead you can work on Ascii images using it. Ok, I know that is not something you might have thought because that can be done with the inbuilt list. But check out the features below bitmap allows you to write images without any index errors also just by image[x, y] syntax. Also, it will just ignore anything that is set outside the bitmap. bitmap portions allows you to get a reference to a part of image, basically if you edit something in bitmap portion, they will be directly reflected over bitmap. Also, your image would not be overwritten after a certain limit of height and width. crypt It is very sure that you might have encountered security issues with your program and you might look for a very simple library to do your task, so here we are we bring you the crypt which features morse code basic encode reverse cipher caesar cipher transposition cipher affine cipher substitution cipher vigenere cipher also you can simply use the new feature cipher combinator for making a class which can encrypt your code with multiple ciphers. ctext ctext is are favorite and best module we have ever built, because it is cross platform console coloring system which supports colors for both windows and unix based os. Also this module is loaded with tons of features like emulated print and input function which you can easily use in place of builtin print and input functions they are very simple to apply. You can also use other features terminal size query clear line clear screen style text code to character window title set cursor movement in all direction print at position formatted escape sequence datau Data Unicode might not be good enough to satisfy your needs but we have a prebuild library of replacement dictionaries which are escaped by function convert , it converts multiline text into the useful unicode text using the dictionaries for example you can convert the following /-------\\ | Hello | \\-------/ into a very nice unicode text which does not show ugly looking spaced between them You can probably try this example to know about an example from denver import datau my_box = \"\"\" /-------\\\\ | Hello | \\\\-------/ \"\"\" # you might need to escape back slashes, we recommend using files for storing and retrieving data my_smooth_box = datau.convert(my_box, datau.box['soft box']) print(my_smooth_box) datp This class is awesome for list representation also datp means Data Processor. we provide some of the good methods like List printing using indentation or tree2 for other type of list representation and tree3 for representation of dictionaries. we also privide StorageTree to extract files under a folder into VSD (Virtual Storage Dictionary). get this module is just awesome for anyone not gud at taking input from user or may be validating it, you can use its print tree method to print directories or you can simply use get file path to get a path to file from user input. there are tons of features tree printer screen clear path input ipv4 validator (ipv4, port) input graphics3d Well this module is loaded with a few algorithms and a fully featured model viewer by which you can view models very easily. There are many algorithms that flattens a 3d vector point to 2d rendered vector point rotate a 3d vector point around its axis model flatten model rotate model maker model dump to file model load from file model viewer handypy This module have functionalities for interacting with real python 3 code. it contains the following featurs analise of imports made by source file that's all for this small module log [Depreciated] This module provides you with basic logging facilities which can be used by your programs to get developed easily. while debugging you can keep the configurations on and while releasing you can switch of error, warnings, debug or you can also change the file to a new file which can contain the log. pysetup Utilities for setuptools.setup , this module basically finds the extra non python data which is sometimes very important for your program, like images, txt, data files rawd Raw D stands for Raw Data, It is implementation of struct module but with guarantee of cross platform support, there are little functions in this module using this modules you can pack, unpack, create format, calculate size and much more. sound Sound is simple implementation for cross platform integration of playsound module you can simply call play_sound function to simply use it to play sound files. text Well, text might have been a long time with you, you might have also faced the problems with text like wrap arounds, side by side joining, but you may have had a disappointing result like this abcd abcd | This text is split abcd abcd fgf | And this is second line abcd a | but if you use this module you can always expect this abcd abcd | This text is split abcd abcd fgf | And this is second line abcd a | and also you can use denver.datau to make it look a little more beautiful in between Tools bdtpserver There might be many people who are not interested in modules and implementing themselves so here we are with our tools for bdtpfserv. this tool can easily do your work with complete command line implementation of the module, it features Hosting Getting Posting Listing Directory Creation you can also know more about it using the following command python -m denver.tools.bdtpserver --help","title":"Brief"},{"location":"brief/#brief","text":"This page contains information about every module in the project.","title":"Brief"},{"location":"brief/#modules","text":"","title":"Modules"},{"location":"brief/#bcli","text":"This module is usually useful for beautiful command line interface for users. the user can easily understand with the help of cross-platform coloring solutions which is a good sign and what is the bad sign, Nothing. bcli's default format contains the following functions. good (green color) bad (red color) info (yellow color) run (bright white color) input (emulates default input function with blue colored input prompt) all the above function emulates complete print function except for input which emulates input function.","title":"bcli"},{"location":"brief/#bdtp","text":"This module is all about sockets, many times it happens that you are unable to send up large data with sockets and you are not willing to write tons of lines for the same. So here we are, we implement the easiest methods for implementing sockets for big data transfer. we provide Host side sending Client side sending Host side receiving Client side receiving Also there are situations where you have a socket already hosted but want to implement our API. No Problems, we provide the following features. Use BDTP with existing socket Get the average speed of the socket Compress data to save data over internet, also resulting in fast transfer on slow connections","title":"bdtp"},{"location":"brief/#bdtpfserv","text":"We have solved the problem of data transfer using BDTP but now the problem is with hosting files on the server. Well, that requires a lot of lines for hosting and getting the things but why to worry we provide the module for that. It basically provide the following features for you to work with Hosting solution for hosting your files which are within a directory. Also, you can simply specify the sub directory of the files hosting service to limit user posts to that directory. Function like listdir, mkdir, post, get to retrieve files and data Our hosting service is also supports multi-threaded get functionality.","title":"bdtpfserv"},{"location":"brief/#bitmap","text":"BitMap module is a little weird because you can not save images or load images, but instead you can work on Ascii images using it. Ok, I know that is not something you might have thought because that can be done with the inbuilt list. But check out the features below bitmap allows you to write images without any index errors also just by image[x, y] syntax. Also, it will just ignore anything that is set outside the bitmap. bitmap portions allows you to get a reference to a part of image, basically if you edit something in bitmap portion, they will be directly reflected over bitmap. Also, your image would not be overwritten after a certain limit of height and width.","title":"bitmap"},{"location":"brief/#crypt","text":"It is very sure that you might have encountered security issues with your program and you might look for a very simple library to do your task, so here we are we bring you the crypt which features morse code basic encode reverse cipher caesar cipher transposition cipher affine cipher substitution cipher vigenere cipher also you can simply use the new feature cipher combinator for making a class which can encrypt your code with multiple ciphers.","title":"crypt"},{"location":"brief/#ctext","text":"ctext is are favorite and best module we have ever built, because it is cross platform console coloring system which supports colors for both windows and unix based os. Also this module is loaded with tons of features like emulated print and input function which you can easily use in place of builtin print and input functions they are very simple to apply. You can also use other features terminal size query clear line clear screen style text code to character window title set cursor movement in all direction print at position formatted escape sequence","title":"ctext"},{"location":"brief/#datau","text":"Data Unicode might not be good enough to satisfy your needs but we have a prebuild library of replacement dictionaries which are escaped by function convert , it converts multiline text into the useful unicode text using the dictionaries for example you can convert the following /-------\\ | Hello | \\-------/ into a very nice unicode text which does not show ugly looking spaced between them You can probably try this example to know about an example from denver import datau my_box = \"\"\" /-------\\\\ | Hello | \\\\-------/ \"\"\" # you might need to escape back slashes, we recommend using files for storing and retrieving data my_smooth_box = datau.convert(my_box, datau.box['soft box']) print(my_smooth_box)","title":"datau"},{"location":"brief/#datp","text":"This class is awesome for list representation also datp means Data Processor. we provide some of the good methods like List printing using indentation or tree2 for other type of list representation and tree3 for representation of dictionaries. we also privide StorageTree to extract files under a folder into VSD (Virtual Storage Dictionary).","title":"datp"},{"location":"brief/#get","text":"this module is just awesome for anyone not gud at taking input from user or may be validating it, you can use its print tree method to print directories or you can simply use get file path to get a path to file from user input. there are tons of features tree printer screen clear path input ipv4 validator (ipv4, port) input","title":"get"},{"location":"brief/#graphics3d","text":"Well this module is loaded with a few algorithms and a fully featured model viewer by which you can view models very easily. There are many algorithms that flattens a 3d vector point to 2d rendered vector point rotate a 3d vector point around its axis model flatten model rotate model maker model dump to file model load from file model viewer","title":"graphics3d"},{"location":"brief/#handypy","text":"This module have functionalities for interacting with real python 3 code. it contains the following featurs analise of imports made by source file that's all for this small module","title":"handypy"},{"location":"brief/#log-depreciated","text":"This module provides you with basic logging facilities which can be used by your programs to get developed easily. while debugging you can keep the configurations on and while releasing you can switch of error, warnings, debug or you can also change the file to a new file which can contain the log.","title":"log [Depreciated]"},{"location":"brief/#pysetup","text":"Utilities for setuptools.setup , this module basically finds the extra non python data which is sometimes very important for your program, like images, txt, data files","title":"pysetup"},{"location":"brief/#rawd","text":"Raw D stands for Raw Data, It is implementation of struct module but with guarantee of cross platform support, there are little functions in this module using this modules you can pack, unpack, create format, calculate size and much more.","title":"rawd"},{"location":"brief/#sound","text":"Sound is simple implementation for cross platform integration of playsound module you can simply call play_sound function to simply use it to play sound files.","title":"sound"},{"location":"brief/#text","text":"Well, text might have been a long time with you, you might have also faced the problems with text like wrap arounds, side by side joining, but you may have had a disappointing result like this abcd abcd | This text is split abcd abcd fgf | And this is second line abcd a | but if you use this module you can always expect this abcd abcd | This text is split abcd abcd fgf | And this is second line abcd a | and also you can use denver.datau to make it look a little more beautiful in between","title":"text"},{"location":"brief/#tools","text":"","title":"Tools"},{"location":"brief/#bdtpserver","text":"There might be many people who are not interested in modules and implementing themselves so here we are with our tools for bdtpfserv. this tool can easily do your work with complete command line implementation of the module, it features Hosting Getting Posting Listing Directory Creation you can also know more about it using the following command python -m denver.tools.bdtpserver --help","title":"bdtpserver"},{"location":"installation/","text":"Installation The package can be installed by pip install pydenver and upgraded by pip install --upgrade pydenver and can be used by from denver import something_that_you_want # your code here","title":"Installation"},{"location":"installation/#installation","text":"The package can be installed by pip install pydenver and upgraded by pip install --upgrade pydenver and can be used by from denver import something_that_you_want # your code here","title":"Installation"},{"location":"modules/bcli/","text":"BCLI Beautiful Command Line Interface This module is perfect for you if you wanted a easy and working solution to Nice Looking Command Line Interface. Somewhat like this The above is generated by this code from denver import bcli cli = bcli.new_cli() cli.info(\"This is a test\") cli.good(\"Works Well\") cli.bad(\"Might be not as expected\") cli.run(\"But let's run this\") print(\"\\n\\n\") # Number Adder number = cli.input(\"Number 1 >\") number2 = cli.input(\"Number 2 >\") # Lets validate them if number.isnumeric() and number2.isnumeric(): cli.good(\"All the numbers are valid\") else: cli.bad(\"The numbers are supposed to be Integers\") raise SystemExit(1) # Lets convert them to integers cli.info(\"Conversion to integers started\") number = int(number) cli.run(\"Number Converted\") number2 = int(number2) cli.run(\"Number 2 Converted\") cli.good(\"All numbers Converted to integer\") # Lets add them try: result = number + number2 cli.good(\"Numbers added\") except: cli.bad(\"Numbers could not be added\") raise SystemExit(1) cli.info(\"Result is\", result) Using bcli is easy for that you have to first import the module from denver import bcli Then you will have to create a command line interface cli = bcli.new_cli() Then you can use info , good , run , bad functions. Also, you can use the input function. After all of the combination from the above you can easily create scripts using bcli.","title":"bcli"},{"location":"modules/bcli/#bcli","text":"","title":"BCLI"},{"location":"modules/bcli/#beautiful-command-line-interface","text":"This module is perfect for you if you wanted a easy and working solution to Nice Looking Command Line Interface. Somewhat like this The above is generated by this code from denver import bcli cli = bcli.new_cli() cli.info(\"This is a test\") cli.good(\"Works Well\") cli.bad(\"Might be not as expected\") cli.run(\"But let's run this\") print(\"\\n\\n\") # Number Adder number = cli.input(\"Number 1 >\") number2 = cli.input(\"Number 2 >\") # Lets validate them if number.isnumeric() and number2.isnumeric(): cli.good(\"All the numbers are valid\") else: cli.bad(\"The numbers are supposed to be Integers\") raise SystemExit(1) # Lets convert them to integers cli.info(\"Conversion to integers started\") number = int(number) cli.run(\"Number Converted\") number2 = int(number2) cli.run(\"Number 2 Converted\") cli.good(\"All numbers Converted to integer\") # Lets add them try: result = number + number2 cli.good(\"Numbers added\") except: cli.bad(\"Numbers could not be added\") raise SystemExit(1) cli.info(\"Result is\", result) Using bcli is easy for that you have to first import the module from denver import bcli Then you will have to create a command line interface cli = bcli.new_cli() Then you can use info , good , run , bad functions. Also, you can use the input function. After all of the combination from the above you can easily create scripts using bcli.","title":"Beautiful Command Line Interface"},{"location":"modules/bdtp/","text":"","title":"bdtp"},{"location":"modules/bdtpfserv/","text":"","title":"bdtpfserv"},{"location":"modules/bitmap/","text":"","title":"bitmap"},{"location":"modules/crypt/","text":"","title":"crypt"},{"location":"modules/ctext/","text":"","title":"ctext"},{"location":"modules/datau/","text":"","title":"datau"},{"location":"modules/datp/","text":"","title":"datp"},{"location":"modules/get/","text":"","title":"get"},{"location":"modules/graphics3d/","text":"","title":"graphics3d"},{"location":"modules/handypy/","text":"","title":"handypy"},{"location":"modules/log/","text":"","title":"log"},{"location":"modules/pysetup/","text":"","title":"pysetup"},{"location":"modules/rawd/","text":"","title":"rawd"},{"location":"modules/sound/","text":"","title":"sound"},{"location":"modules/text/","text":"","title":"text"},{"location":"tools/bdtpserver/","text":"","title":"Bdtpserver"}]}